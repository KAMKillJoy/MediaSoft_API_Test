
services:
 postgres:
  image: postgres:latest
  container_name: postgres_container
  environment:
   POSTGRES_USER: postgres_user
   POSTGRES_PASSWORD: postgres_password
   POSTGRES_DB: postgres_db
  ports:
   - "5432:5432"
  deploy:
   resources:
    limits:
     cpus: '0.50'
     memory: 512M
    reservations:
     cpus: '0.25'
     memory: 256M
  command: >
   postgres -c max_connections=1000
            -c shared_buffers=256MB
            -c effective_cache_size=768MB
            -c maintenance_work_mem=64MB
            -c checkpoint_completion_target=0.7
            -c wal_buffers=16MB
            -c default_statistics_target=100
  healthcheck:
   test: [ "CMD-SHELL", "pg_isready -U postgres_user -d postgres_db" ]
   interval: 30s
   timeout: 10s
   retries: 5
  restart: unless-stopped
  tty: true
  stdin_open: true
 # Kafka and ZooKeeper
 zookeeper:
  image: confluentinc/cp-zookeeper:7.3.3
  restart: always
  ports:
   - "2181:2181"
  environment:
   ZOOKEEPER_CLIENT_PORT: 2181
   ZOOKEEPER_TICK_TIME: 2000

 kafka:
  image: confluentinc/cp-kafka:7.3.3
  restart: always
  ports:
   - "9092:9092"
   - "9094:9094" # Expose for JMX monitoring (optional)
  environment:
   KAFKA_BROKER_ID: 1
   KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
   KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9094
   KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
   KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
   KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1 # For single-broker setup
   KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1 # For single-broker setup
   KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1    # For single-broker setup
   KAFKA_CREATE_TOPICS: "order-topic:1:1" # Creates the topic
  healthcheck:
   test: ["CMD-SHELL", "/usr/bin/kafka-topics --bootstrap-server kafka:9092 --list"]
   interval: 10s
   timeout: 5s
   retries: 5

 # Your Warehouse application
 warehouse:
  image: evgen73ul/warehouse:ms6 # Replace with your Docker Hub image and tag
  restart: always
  ports:
   - "8080:8080" # Or whatever port your app uses
   #KAFKA_BOOTSTRAP_SERVERS: kafka:9092 # Example: pass Kafka URL to your app
   #KAFKA_CONSUMER_GROUP_ID: test123   # Example: pass consumer group ID
  #  healthcheck: # Add a healthcheck appropriate for your application
  #    test: ["CMD", "curl", "-f", "http://localhost:8080/health"] # Or an API endpoint
  #    interval: 10s
  #    timeout: 5s
  #    retries: 5
